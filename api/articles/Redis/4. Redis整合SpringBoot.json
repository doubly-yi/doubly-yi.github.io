{"title":"4. Redis整合SpringBoot.md","uid":"269d526417b005df367f7ce3a1296fbf","slug":"Redis/4. Redis整合SpringBoot","date":"2021-10-20T14:49:24.000Z","updated":"2021-10-20T15:42:30.500Z","comments":true,"path":"api/articles/Redis/4. Redis整合SpringBoot.json","keywords":null,"cover":"/images/default-cover.jpg","content":"<p>依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<p>SpringBoot操作数据：Spring-data jpa jdbc mongodb redis</p>\n<p>SpringData也是和SpringBoot齐名的项目</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>说明：SpringBoot 2.x.x以后，原来使用的jedis被替换成了lettuce</p></blockquote>\n<ul>\n<li><p>jedis:采用的直连，多个线程操作的话，是不安全的。如果要避免不安全的，使用jedis连接池。像BIO模式</p>\n</li>\n<li><p>lettuce:采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况。可以减少线程数据。像NIO模式</p>\n</li>\n</ul>\n<p>自动配置源码分析</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(\n    proxyBeanMethods &#x3D; false\n)\n@ConditionalOnClass(&#123;RedisOperations.class&#125;)\n&#x2F;&#x2F;所有的Redis配置在RedisProperties类里面就可以看到\n@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)\n@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)\npublic class RedisAutoConfiguration &#123;\n    public RedisAutoConfiguration() &#123;\n    &#125;\n\n    @Bean\n    &#x2F;&#x2F;如果没有则创建，我们可以自己创建一个覆盖这个Bean\n    @ConditionalOnMissingBean(\n        name &#x3D; &#123;&quot;redisTemplate&quot;&#125;\n    )\n    @ConditionalOnSingleCandidate(RedisConnectionFactory.class)\n    public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;\n        RedisTemplate&lt;Object, Object&gt; template &#x3D; new RedisTemplate();\n        template.setConnectionFactory(redisConnectionFactory);\n        return template;\n    &#125;\n\n    &#x2F;&#x2F;单独提供了一个操作String类型的Template，redis操作String比较常用\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnSingleCandidate(RedisConnectionFactory.class)\n    public StringRedisTemplate stringRedisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;\n        StringRedisTemplate template &#x3D; new StringRedisTemplate();\n        template.setConnectionFactory(redisConnectionFactory);\n        return template;\n    &#125;\n&#125;</code></pre>\n<p>配置</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">spring.redis.host&#x3D;127.0.0.1\nspring.redis.port&#x3D;6379</code></pre>\n\n\n<p>使用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;redisTemplate提供了对每种数据类型的操作，然后操作与命令基本相同\nredisTemplate.opsForSet();\nredisTemplate.opsForHash();\nredisTemplate.opsForList();\nredisTemplate.opsForZSet();\nredisTemplate.opsForValue();\nredisTemplate.opsForGeo();\nredisTemplate.opsForHyperLogLog();</code></pre>\n\n<p>示例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootTest\nclass SpringbootApplicationTests &#123;\n\n    @Resource\n    private RedisTemplate redisTemplate;\n\n    @Test\n    void contextLoads() &#123;\n        redisTemplate.opsForValue().set(&quot;name&quot;,&quot;Doubly&quot;);\n        System.out.println(redisTemplate.opsForValue().get(&quot;name&quot;));\n    &#125;\n\n&#125;</code></pre>\n\n\n\n<p><strong>自定义RestTemplate模板</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class RedisConfig &#123;\n\n    &#x2F;&#x2F;自己定义了一个RestTemplate\n    @Bean\n    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;\n\n        &#x2F;&#x2F;一般为了方便，直接使用&lt;String,Objcet&gt;\n        RedisTemplate&lt;String, Object&gt; template &#x3D; new RedisTemplate();\n        template.setConnectionFactory(redisConnectionFactory);\n\n        &#x2F;&#x2F;json序列化\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer &#x3D; new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper objectMapper &#x3D; new ObjectMapper();\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        &#x2F;&#x2F;String序列化\n        StringRedisSerializer stringRedisSerializer &#x3D; new StringRedisSerializer();\n\n        &#x2F;&#x2F;设置key使用String序列化\n        template.setKeySerializer(stringRedisSerializer);\n        &#x2F;&#x2F;设置hashkey使用String序列化\n        template.setHashKeySerializer(stringRedisSerializer);\n        &#x2F;&#x2F;设置value使用json序列化\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        &#x2F;&#x2F;设置HashValue使用json序列化\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\n\n        template.afterPropertiesSet();\n\n        return template;\n    &#125;\n\n&#125;</code></pre>\n\n\n<p>SpringBoot RedisUtil工具类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package cn.doubly.utils;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\n\nimport javax.annotation.Resource;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\n@Component\npublic final class RedisUtil &#123;\n\n\n    @Resource\n    private RedisTemplate&lt;String, Object&gt; redisTemplate;\n\n    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;common&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\n    &#x2F;**\n     * 26\n     * 指定缓存失效时间\n     * 27\n     *\n     * @param key  键\n     *             28\n     * @param time 时间(秒)\n     *             29\n     * @return 30\n     *&#x2F;\n\n    public boolean expire(String key, long time) &#123;\n\n        try &#123;\n\n            if (time &gt; 0) &#123;\n\n                redisTemplate.expire(key, time, TimeUnit.SECONDS);\n\n            &#125;\n\n            return true;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 44\n     * 根据key 获取过期时间\n     * 45\n     *\n     * @param key 键 不能为null\n     *            46\n     * @return 时间(秒) 返回0代表为永久有效\n     * 47\n     *&#x2F;\n\n    public long getExpire(String key) &#123;\n\n        return redisTemplate.getExpire(key, TimeUnit.SECONDS);\n\n    &#125;\n\n    &#x2F;**\n     * 53\n     * 判断key是否存在\n     * 54\n     *\n     * @param key 键\n     *            55\n     * @return true 存在 false不存在\n     * 56\n     *&#x2F;\n\n    public boolean hasKey(String key) &#123;\n\n        try &#123;\n\n            return redisTemplate.hasKey(key);\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 67\n     * 删除缓存\n     * 68\n     *\n     * @param key 可以传一个值 或多个\n     *            69\n     *&#x2F;\n\n    @SuppressWarnings(&quot;unchecked&quot;)\n\n    public void del(String... key) &#123;\n\n        if (key !&#x3D; null &amp;&amp; key.length &gt; 0) &#123;\n\n            if (key.length &#x3D;&#x3D; 1) &#123;\n\n                redisTemplate.delete(key[0]);\n\n            &#125; else &#123;\n\n\n                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));\n            &#125;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;String&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\n    &#x2F;**\n     * 83\n     * 普通缓存获取\n     * 84\n     *\n     * @param key 键\n     *            85\n     * @return 值\n     * 86\n     *&#x2F;\n\n    public Object get(String key) &#123;\n\n        return key &#x3D;&#x3D; null ? null : redisTemplate.opsForValue().get(key);\n\n    &#125;\n\n    &#x2F;**\n     * 92\n     * 普通缓存放入\n     * 93\n     *\n     * @param key   键\n     *              94\n     * @param value 值\n     *              95\n     * @return true成功 false失败\n     * 96\n     *&#x2F;\n\n    public boolean set(String key, Object value) &#123;\n\n        try &#123;\n\n            redisTemplate.opsForValue().set(key, value);\n\n            return true;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 109\n     * 普通缓存放入并设置时间\n     * 110\n     *\n     * @param key   键\n     *              111\n     * @param value 值\n     *              112\n     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期\n     *              113\n     * @return true成功 false 失败\n     * 114\n     *&#x2F;\n\n    public boolean set(String key, Object value, long time) &#123;\n\n        try &#123;\n\n            if (time &gt; 0) &#123;\n\n                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n\n            &#125; else &#123;\n\n                set(key, value);\n\n            &#125;\n\n            return true;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 130\n     * 递增\n     * 131\n     *\n     * @param key   键\n     *              132\n     * @param delta 要增加几(大于0)\n     *              133\n     * @return 134\n     *&#x2F;\n\n    public long incr(String key, long delta) &#123;\n\n        if (delta &lt; 0) &#123;\n\n            throw new RuntimeException(&quot;递增因子必须大于0&quot;);\n\n        &#125;\n\n        return redisTemplate.opsForValue().increment(key, delta);\n\n    &#125;\n\n    &#x2F;**\n     * 143\n     * 递减\n     * 144\n     *\n     * @param key   键\n     *              145\n     * @param delta 要减少几(小于0)\n     *              146\n     * @return 147\n     *&#x2F;\n\n    public long decr(String key, long delta) &#123;\n\n        if (delta &lt; 0) &#123;\n\n            throw new RuntimeException(&quot;递减因子必须大于0&quot;);\n\n        &#125;\n\n        return redisTemplate.opsForValue().increment(key, -delta);\n\n    &#125;\n\n    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Map&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\n    &#x2F;**\n     * 157\n     * HashGet\n     * 158\n     *\n     * @param key  键 不能为null\n     *             159\n     * @param item 项 不能为null\n     *             160\n     * @return 值\n     * 161\n     *&#x2F;\n\n    public Object hget(String key, String item) &#123;\n\n        return redisTemplate.opsForHash().get(key, item);\n\n    &#125;\n\n    &#x2F;**\n     * 167\n     * 获取hashKey对应的所有键值\n     * 168\n     *\n     * @param key 键\n     *            169\n     * @return 对应的多个键值\n     * 170\n     *&#x2F;\n\n    public Map&lt;Object, Object&gt; hmget(String key) &#123;\n\n        return redisTemplate.opsForHash().entries(key);\n\n    &#125;\n\n    &#x2F;**\n     * 176\n     * HashSet\n     * 177\n     *\n     * @param key 键\n     *            178\n     * @param map 对应多个键值\n     *            179\n     * @return true 成功 false 失败\n     * 180\n     *&#x2F;\n\n    public boolean hmset(String key, Map&lt;String, Object&gt; map) &#123;\n\n        try &#123;\n\n            redisTemplate.opsForHash().putAll(key, map);\n\n            return true;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 192\n     * HashSet 并设置时间\n     * 193\n     *\n     * @param key  键\n     *             194\n     * @param map  对应多个键值\n     *             195\n     * @param time 时间(秒)\n     *             196\n     * @return true成功 false失败\n     * 197\n     *&#x2F;\n\n    public boolean hmset(String key, Map&lt;String, Object&gt; map, long time) &#123;\n\n        try &#123;\n\n            redisTemplate.opsForHash().putAll(key, map);\n\n            if (time &gt; 0) &#123;\n\n                expire(key, time);\n\n            &#125;\n\n            return true;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 212\n     * 向一张hash表中放入数据,如果不存在将创建\n     * 213\n     *\n     * @param key   键\n     *              214\n     * @param item  项\n     *              215\n     * @param value 值\n     *              216\n     * @return true 成功 false失败\n     * 217\n     *&#x2F;\n\n    public boolean hset(String key, String item, Object value) &#123;\n\n        try &#123;\n\n            redisTemplate.opsForHash().put(key, item, value);\n\n            return true;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 229\n     * 向一张hash表中放入数据,如果不存在将创建\n     * 230\n     *\n     * @param key   键\n     *              231\n     * @param item  项\n     *              232\n     * @param value 值\n     *              233\n     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间\n     *              234\n     * @return true 成功 false失败\n     * 235\n     *&#x2F;\n\n    public boolean hset(String key, String item, Object value, long time) &#123;\n\n        try &#123;\n\n            redisTemplate.opsForHash().put(key, item, value);\n\n            if (time &gt; 0) &#123;\n\n                expire(key, time);\n\n            &#125;\n\n            return true;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 250\n     * 删除hash表中的值\n     * 251\n     *\n     * @param key  键 不能为null\n     *             252\n     * @param item 项 可以使多个 不能为null\n     *             253\n     *&#x2F;\n\n    public void hdel(String key, Object... item) &#123;\n\n        redisTemplate.opsForHash().delete(key, item);\n\n    &#125;\n\n    &#x2F;**\n     * 259\n     * 判断hash表中是否有该项的值\n     * 260\n     *\n     * @param key  键 不能为null\n     *             261\n     * @param item 项 不能为null\n     *             262\n     * @return true 存在 false不存在\n     * 263\n     *&#x2F;\n\n    public boolean hHasKey(String key, String item) &#123;\n\n        return redisTemplate.opsForHash().hasKey(key, item);\n\n    &#125;\n\n    &#x2F;**\n     * 269\n     * hash递增 如果不存在,就会创建一个 并把新增后的值返回\n     * 270\n     *\n     * @param key  键\n     *             271\n     * @param item 项\n     *             272\n     * @param by   要增加几(大于0)\n     *             273\n     * @return 274\n     *&#x2F;\n\n    public double hincr(String key, String item, double by) &#123;\n\n        return redisTemplate.opsForHash().increment(key, item, by);\n\n    &#125;\n\n    &#x2F;**\n     * 280\n     * hash递减\n     * 281\n     *\n     * @param key  键\n     *             282\n     * @param item 项\n     *             283\n     * @param by   要减少记(小于0)\n     *             284\n     * @return 285\n     *&#x2F;\n\n    public double hdecr(String key, String item, double by) &#123;\n\n        return redisTemplate.opsForHash().increment(key, item, -by);\n\n    &#125;\n\n    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;set&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\n    &#x2F;**\n     * 292\n     * 根据key获取Set中的所有值\n     * 293\n     *\n     * @param key 键\n     *            294\n     * @return 295\n     *&#x2F;\n\n    public Set&lt;Object&gt; sGet(String key) &#123;\n\n        try &#123;\n\n            return redisTemplate.opsForSet().members(key);\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return null;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 306\n     * 根据value从一个set中查询,是否存在\n     * 307\n     *\n     * @param key   键\n     *              308\n     * @param value 值\n     *              309\n     * @return true 存在 false不存在\n     * 310\n     *&#x2F;\n\n    public boolean sHasKey(String key, Object value) &#123;\n\n        try &#123;\n\n            return redisTemplate.opsForSet().isMember(key, value);\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 321\n     * 将数据放入set缓存\n     * 322\n     *\n     * @param key    键\n     *               323\n     * @param values 值 可以是多个\n     *               324\n     * @return 成功个数\n     * 325\n     *&#x2F;\n\n    public long sSet(String key, Object... values) &#123;\n\n        try &#123;\n\n            return redisTemplate.opsForSet().add(key, values);\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return 0;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 336\n     * 将set数据放入缓存\n     * 337\n     *\n     * @param key    键\n     *               338\n     * @param time   时间(秒)\n     *               339\n     * @param values 值 可以是多个\n     *               340\n     * @return 成功个数\n     * 341\n     *&#x2F;\n\n    public long sSetAndTime(String key, long time, Object... values) &#123;\n\n        try &#123;\n\n            Long count &#x3D; redisTemplate.opsForSet().add(key, values);\n\n            if (time &gt; 0)\n\n                expire(key, time);\n\n            return count;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return 0;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 355\n     * 获取set缓存的长度\n     * 356\n     *\n     * @param key 键\n     *            357\n     * @return 358\n     *&#x2F;\n\n    public long sGetSetSize(String key) &#123;\n\n        try &#123;\n\n            return redisTemplate.opsForSet().size(key);\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return 0;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 369\n     * 移除值为value的\n     * 370\n     *\n     * @param key    键\n     *               371\n     * @param values 值 可以是多个\n     *               372\n     * @return 移除的个数\n     * 373\n     *&#x2F;\n\n    public long setRemove(String key, Object... values) &#123;\n\n        try &#123;\n\n            Long count &#x3D; redisTemplate.opsForSet().remove(key, values);\n\n            return count;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return 0;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;list&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\n    &#x2F;**\n     * 386\n     * 获取list缓存的内容\n     * 387\n     *\n     * @param key   键\n     *              388\n     * @param start 开始\n     *              389\n     * @param end   结束 0 到 -1代表所有值\n     *              390\n     * @return 391\n     *&#x2F;\n\n    public List&lt;Object&gt; lGet(String key, long start, long end) &#123;\n\n        try &#123;\n\n            return redisTemplate.opsForList().range(key, start, end);\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return null;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 402\n     * 获取list缓存的长度\n     * 403\n     *\n     * @param key 键\n     *            404\n     * @return 405\n     *&#x2F;\n\n    public long lGetListSize(String key) &#123;\n\n        try &#123;\n\n            return redisTemplate.opsForList().size(key);\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return 0;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 416\n     * 通过索引 获取list中的值\n     * 417\n     *\n     * @param key   键\n     *              418\n     * @param index 索引 index&gt;&#x3D;0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推\n     *              419\n     * @return 420\n     *&#x2F;\n\n    public Object lGetIndex(String key, long index) &#123;\n\n        try &#123;\n\n            return redisTemplate.opsForList().index(key, index);\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return null;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 431\n     * 将list放入缓存\n     * 432\n     *\n     * @param key   键\n     *              433\n     * @param value 值\n     *              434\n     * @paramtime  时间(秒)\n     *              435\n     * @return 436\n     *&#x2F;\n\n    public boolean lSet(String key, Object value) &#123;\n\n        try &#123;\n\n            redisTemplate.opsForList().rightPush(key, value);\n\n            return true;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 将list放入缓存\n     *\n     * @param key   键\n     * @param value 值\n     * @param time  时间(秒)\n     * @return\n     *&#x2F;\n\n    public boolean lSet(String key, Object value, long time) &#123;\n\n        try &#123;\n\n            redisTemplate.opsForList().rightPush(key, value);\n\n            if (time &gt; 0)\n\n                expire(key, time);\n\n            return true;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 467\n     * 将list放入缓存\n     * 468\n     *\n     * @param key   键\n     *              469\n     * @param value 值\n     *              470\n     * @paramtime  时间(秒)\n     *              471\n     * @return 472\n     *&#x2F;\n\n    public boolean lSet(String key, List&lt;Object&gt; value) &#123;\n\n        try &#123;\n\n            redisTemplate.opsForList().rightPushAll(key, value);\n\n            return true;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 484\n     * 将list放入缓存\n     * 485\n     * &lt;p&gt;\n     * 486\n     *\n     * @param key   键\n     *              487\n     * @param value 值\n     *              488\n     * @param time  时间(秒)\n     *              489\n     * @return 490\n     *&#x2F;\n\n    public boolean lSet(String key, List&lt;Object&gt; value, long time) &#123;\n\n        try &#123;\n\n            redisTemplate.opsForList().rightPushAll(key, value);\n\n            if (time &gt; 0)\n\n                expire(key, time);\n\n            return true;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 504\n     * 根据索引修改list中的某条数据\n     * 505\n     *\n     * @param key   键\n     *              506\n     * @param index 索引\n     *              507\n     * @param value 值\n     *              508\n     * @return 509\n     *&#x2F;\n\n    public boolean lUpdateIndex(String key, long index, Object value) &#123;\n\n        try &#123;\n\n            redisTemplate.opsForList().set(key, index, value);\n\n            return true;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return false;\n\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 521\n     * 移除N个值为value\n     * 522\n     *\n     * @param key   键\n     *              523\n     * @param count 移除多少个\n     *              524\n     * @param value 值\n     *              525\n     * @return 移除的个数\n     * 526\n     *&#x2F;\n\n    public long lRemove(String key, long count, Object value) &#123;\n\n        try &#123;\n\n            Long remove &#x3D; redisTemplate.opsForList().remove(key, count, value);\n\n            return remove;\n\n        &#125; catch (Exception e) &#123;\n\n            e.printStackTrace();\n\n            return 0;\n\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>","text":"依赖 &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-boot-starte...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"Redis","slug":"Redis","count":10,"path":"api/tags/Redis.json"}],"toc":"","author":{"name":"小益子","slug":"blog-author","avatar":"/images/HeadPhoto.jpg","link":"/","description":"小益子的个人博客","socials":{"github":"https://github.com/doubly-yi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_18335837","juejin":"","customs":{"gitee":{"icon":"/icons/gitee2.svg","link":"https://gitee.com/doubly"},"bilibili":{"icon":"/icons/bilibili.svg","link":"https://space.bilibili.com/294694129"}}}},"mapped":true,"prev_post":{"title":"5. Redis Conf详解","uid":"a0274a1990a09ab30c455a7b67d6d5c7","slug":"Redis/5. Redis Conf详解","date":"2021-10-20T14:49:25.000Z","updated":"2021-10-20T15:42:35.992Z","comments":true,"path":"api/articles/Redis/5. Redis Conf详解.json","keywords":null,"cover":"/images/default-cover.jpg","text":" 单位 单位大小写不敏感 # Note on units: when memory size is needed, it is possible to specify # it in the usual form of 1k 5GB 4M and so forth: # # 1k...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"Redis","slug":"Redis","count":10,"path":"api/tags/Redis.json"}],"author":{"name":"小益子","slug":"blog-author","avatar":"/images/HeadPhoto.jpg","link":"/","description":"小益子的个人博客","socials":{"github":"https://github.com/doubly-yi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_18335837","juejin":"","customs":{"gitee":{"icon":"/icons/gitee2.svg","link":"https://gitee.com/doubly"},"bilibili":{"icon":"/icons/bilibili.svg","link":"https://space.bilibili.com/294694129"}}}}},"next_post":{"title":"3. Jedis","uid":"db7ea4437a64676d67da146e8befffea","slug":"Redis/3. Jedis","date":"2021-10-20T14:49:23.000Z","updated":"2021-10-20T15:42:22.902Z","comments":true,"path":"api/articles/Redis/3. Jedis.json","keywords":null,"cover":"/images/default-cover.jpg","text":"依赖 &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt; &lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt; &lt;version&gt;3.6.1...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"Redis","slug":"Redis","count":10,"path":"api/tags/Redis.json"}],"author":{"name":"小益子","slug":"blog-author","avatar":"/images/HeadPhoto.jpg","link":"/","description":"小益子的个人博客","socials":{"github":"https://github.com/doubly-yi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_18335837","juejin":"","customs":{"gitee":{"icon":"/icons/gitee2.svg","link":"https://gitee.com/doubly"},"bilibili":{"icon":"/icons/bilibili.svg","link":"https://space.bilibili.com/294694129"}}}}}}