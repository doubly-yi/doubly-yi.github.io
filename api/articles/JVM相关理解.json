{"title":"JVM相关理解","uid":"a648e8bf5173782b69842a75bd58b03c","slug":"JVM相关理解","date":"2021-10-14T14:49:20.000Z","updated":"2021-10-20T14:51:28.827Z","comments":true,"path":"api/articles/JVM相关理解.json","keywords":null,"cover":"/images/default-cover3.jpg","content":"<h1 id=\"Java虚拟机整体架构祥图\"><a href=\"#Java虚拟机整体架构祥图\" class=\"headerlink\" title=\"Java虚拟机整体架构祥图\"></a>Java虚拟机整体架构祥图</h1><p><img src=\"http://cdn.processon.com/5ed9f7c9e0b34d4139005bf3?e=1591346649&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:Qw4MibFHbwWwJugdTn178Nx1_y8=\" alt=\"JVM整体架构图\"></p>\n<h1 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h1><ol>\n<li><p>虚拟机自带的加载器</p>\n</li>\n<li><p>启动类（根、BootStrap）加载器</p>\n</li>\n<li><p>扩展类加载器</p>\n</li>\n<li><p>应用程序（系统）加载器</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    ClassLoader classLoader &#x3D; OtherTest.class.getClassLoader();\n    &#x2F;&#x2F;AppClassLoader，应用程序加载器   实现java.lang.abstract\n    System.out.println(classLoader);\n    &#x2F;&#x2F;ExtClassLoader，扩展加载器   jre&#x2F;lib&#x2F;ext目录\n    System.out.println(classLoader.getParent());\n    &#x2F;&#x2F;null，不存在或者java无法获取   rt.jar\n    System.out.println(classLoader.getParent().getParent());\n&#125;</code></pre>\n\n<h1 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h1><ol>\n<li><p>类加载器收到加载类的请求</p>\n</li>\n<li><p>将这个请求向上委托父类加载器去完成，一直向上委托到根加载器</p>\n</li>\n<li><p>根加载器检查是否能够加载此类，能加载就加载并结束；不能加载则抛出异常，通知子加载器进行加载</p>\n</li>\n<li><p>重复步骤3</p>\n</li>\n</ol>\n<p>示例代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package java.lang;\n&#x2F;*\n * @Description\n * @Author Doubly\n * @Date 2021&#x2F;10&#x2F;8\n *&#x2F;\npublic class String &#123;\n    public String toString()&#123;\n        return &quot;Hello&quot;;\n    &#125;\n    public static void main(String[] args) &#123;\n        String s &#x3D; new String();\n        System.out.println(s.toString());\n    &#125;\n&#125;</code></pre>\n\n<p>运行结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:\n   public static void main(String[] args)\n否则 JavaFX 应用程序类必须扩展javafx.application.Application           </code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为了保证程序的安全，首先在AppClassLoader中找String，虽然已经找到，但是会继续在ExtClassLoader中找，最后在BootStrapClassLoader中找，找到rt.jar下面的String。所以不会家在我们自己写的String，会报没有main方法的错误。</p>\n<p><code>AppClassLoader -&gt; ExtClassLoader -&gt; BootstrapClassLoader（最终执行）</code></p></blockquote>\n<h1 id=\"native关键字\"><a href=\"#native关键字\" class=\"headerlink\" title=\"native关键字\"></a>native关键字</h1><p>凡是带了native关键字的，说明Java的作用范围达不到了。会进入本地方法栈，通过本地方法接口（JNI）调用本地方法库。比如Object中的<code>hashcode()</code>方法，就是调用的本地方法。</p>\n<h1 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h1><p><strong>静态变量</strong>、<strong>常量</strong>、<strong>类信息</strong>（构造方法、接口定义）、<strong>运行时的常量池</strong>存在方法区中，但是实例变量存在堆内存，和方法区无关</p>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p>8大基本类型+对象引用+实例的方法</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><p>一个jvm只有一个堆内存，堆内存大小是可以调节的。</p>\n<p>默认分配的总内存是电脑的1/4，初始化的内存是电脑的1/64.</p>\n<p>代码示例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F;返回虚拟机试图使用的最大内存\n        long maxMemory &#x3D; Runtime.getRuntime().maxMemory();\n        &#x2F;&#x2F;返回虚拟机初始化使用的总内存\n        long totalMemory &#x3D; Runtime.getRuntime().totalMemory();\n\n        System.out.println(&quot;max:&quot;+maxMemory + &quot;字节 &quot; + (maxMemory&#x2F;(double)1024&#x2F;1024) + &quot;MB&quot;);\n        System.out.println(&quot;max:&quot;+totalMemory + &quot;字节 &quot; + (totalMemory&#x2F;(double)1024&#x2F;1024) + &quot;MB&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">max:1908932608字节 1820.5MB \nmax:128974848字节 123.0MB  </code></pre>\n\n<p>​            </p>\n<p><strong>堆内存细分三个区域</strong>：</p>\n<ul>\n<li><p>新生区（伊甸园区+幸存区0区+幸存区1区）（幸存区也叫from区与to区）</p>\n</li>\n<li><p>养老区</p>\n</li>\n<li><p>永久区</p>\n</li>\n</ul>\n<h2 id=\"新生区\"><a href=\"#新生区\" class=\"headerlink\" title=\"新生区\"></a>新生区</h2><h3 id=\"伊甸园区\"><a href=\"#伊甸园区\" class=\"headerlink\" title=\"伊甸园区\"></a>伊甸园区</h3><p>所有的对象都是在伊甸园区new出来的，伊甸园区满了会出发轻gc</p>\n<h3 id=\"幸存区（0区-1区）\"><a href=\"#幸存区（0区-1区）\" class=\"headerlink\" title=\"幸存区（0区+1区）\"></a>幸存区（0区+1区）</h3><p>gc触发后，还存在引用指向对象，对象就不会被回收，会进入幸存区。伊甸园区和幸存区都满了以后会今进行重gc。</p>\n<h2 id=\"养老区\"><a href=\"#养老区\" class=\"headerlink\" title=\"养老区\"></a>养老区</h2><p>幸存区满了之后，会进入养老区。一般99%的对象都会被清除，默认当一个对象经历15次后可以进入养老区。养老区满了之后就出现了OOM（Out Of Memory）。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>查看JVM堆中每个区的情况，可使用如下参数</p></blockquote>\n<p>JVM参数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-Xms1024m -Xmx2048m -XX:+PrintGCDetails   </code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Heap\n PSYoungGen      total 305664K, used 20971K [0x0000000795580000, 0x00000007aaa80000, 0x00000007c0000000)\n  eden space 262144K, 8% used [0x0000000795580000,0x00000007969fafb8,0x00000007a5580000)\n  from space 43520K, 0% used [0x00000007a8000000,0x00000007a8000000,0x00000007aaa80000)\n  to   space 43520K, 0% used [0x00000007a5580000,0x00000007a5580000,0x00000007a8000000)\n ParOldGen       total 699392K, used 0K [0x0000000740000000, 0x000000076ab00000, 0x0000000795580000)\n  object space 699392K, 0% used [0x0000000740000000,0x0000000740000000,0x000000076ab00000)\n Metaspace       used 3104K, capacity 4496K, committed 4864K, reserved 1056768K\n  class space    used 339K, capacity 388K, committed 512K, reserved 1048576K\n           </code></pre>\n\n<p>OOM之后如何排查问题？</p>\n<ol>\n<li><p>尝试扩大堆内存看结果</p>\n</li>\n<li><p>分析内存，看一下哪个地方出现了问题（专业工具）</p>\n</li>\n</ol>\n<p>内存快照分析工具：MAT（Eclipse最早继承）,Jprofiler</p>\n<p>MAT、JProfiler作用：</p>\n<ol>\n<li><p>分析Dump内存文件，快速定位内存泄漏</p>\n</li>\n<li><p>获得堆中的数据</p>\n</li>\n<li><p>获得大的对象</p>\n</li>\n</ol>\n<p>如何获取JVM的dump文件？</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-Xms1m -Xmx1m -XX:+HeapDumpOnOutOfMemoryError</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test &#123;\n    &#x2F;&#x2F;-Xms1m -Xmx1m -XX:+HeapDumpOnOutOfMemoryError\n    public static void main(String[] args) &#123;\n        String str &#x3D; &quot;MyString&quot;;\n        while (true)&#123;\n            System.out.println(str);\n            str +&#x3D; new Random(999999999);\n        &#125;\n    &#125;\n&#125;    </code></pre>\n\n<h2 id=\"永久区-元空间\"><a href=\"#永久区-元空间\" class=\"headerlink\" title=\"永久区/元空间\"></a>永久区/元空间</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>逻辑上存在，物理上不存在。新生区+老年区=jvm使用的堆内存</p></blockquote>\n<p>这个区域常驻内存的，用来存放jdk自身携带的Class对象、Interface元数据，存储的是Java运行的一些环境或类信息。<strong>这个区域不存在垃圾回收。关闭虚拟机就会释放这个区域的内存。</strong></p>\n<p>历史：</p>\n<ul>\n<li><p>Jdk1.6之前：永久代，常量池在方法区重</p>\n</li>\n<li><p>JDK1.7：永久代，但是慢慢的退化了。去永久代，常量池在堆中</p>\n</li>\n<li><p>JDK1.8以后：无永久代，常量池在元空间</p>\n</li>\n</ul>\n<h2 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h2><p>垃圾回收主要是在伊甸园区和养老区</p>\n<p>垃圾回收可分为两种：</p>\n<ol>\n<li><p>轻量级垃圾回收（轻gc）</p>\n<p>​    回收新生区和偶尔幸存区</p>\n</li>\n<li><p>重量级垃圾回收（重gc、full gc）</p>\n<p>​    养老区满了，回收养老区</p>\n</li>\n</ol>\n<p><strong>JVM如何判断对象需要回收？</strong></p>\n<ol>\n<li>引用计数法：每个对象引用次数做计数，每次被引用则计数+1，失去引用则-1。当计数为0的就清除。</li>\n<li>可达性算法：从GC Roots开始查找引用，能够被找到的说明被引用可达，其余的则引用不可达，需要清除。</li>\n</ol>\n<p><strong>什么是GC Roots？</strong></p>\n<ol>\n<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>\n<li>方法区中类静态属性引用的对象</li>\n<li>方法区中常量引用的对象</li>\n<li>本地方法栈中JNI（即一般说的native方法）中引用的对象</li>\n</ol>\n<h2 id=\"gc算法\"><a href=\"#gc算法\" class=\"headerlink\" title=\"gc算法\"></a>gc算法</h2><p><strong>标记清除法：扫描对象，对活着的对象进行标记；对没有标记的对象进行清除</strong></p>\n<p>​        优点：不需要额外空间</p>\n<p>​        缺点：标记和清除两次扫描，严重浪费时间；会产生内存碎片</p>\n<p><strong>标记压缩：再对标记清除算法进行压缩整理</strong></p>\n<p>​        再次扫描，向一段移动存活对对象，防止内存碎片的产生</p>\n<p><strong>复制算法：新生区以及from区的存活对象复制到to区，to区永远是空的</strong></p>\n<p>​        优点：没有内存碎片</p>\n<p>​        缺点：浪费空间，to区永远是空的</p>\n<p>​        最佳使用场景：对象存活度较低，新生区</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>内存效率：复制算法&gt;标记清除&gt;标记压缩（时间复杂度）</p>\n<p>内存整齐度：复制算法=标记压缩&gt;标记清除</p>\n<p>内存利用率：标记压缩=标记清除&gt;复制算法</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>没有最优的算法，只有最合适的算法。</p></blockquote>\n<p><strong>所以GC使用分代收集算法</strong></p>\n<p>新生区：存活率较低，使用复制算法</p>\n<p>老年区：存活率较高，使用标记清除+标记压缩算法</p>\n","feature":true,"text":"Java虚拟机整体架构祥图 类加载器 虚拟机自带的加载器 启动类（根、BootStrap）加载器 扩展类加载器 应用程序（系统）加载器 public static void main(String[] args) &#123; ClassLoader classLoader &#...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":1,"path":"api/categories/Java.json"}],"tags":[{"name":"JVM","slug":"JVM","count":1,"path":"api/tags/JVM.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E7%A5%A5%E5%9B%BE\"><span class=\"toc-text\">Java虚拟机整体架构祥图</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8\"><span class=\"toc-text\">类加载器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">双亲委派机制</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#native%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">native关键字</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E5%8C%BA\"><span class=\"toc-text\">方法区</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%88\"><span class=\"toc-text\">栈</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A0%86\"><span class=\"toc-text\">堆</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B0%E7%94%9F%E5%8C%BA\"><span class=\"toc-text\">新生区</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%8A%E7%94%B8%E5%9B%AD%E5%8C%BA\"><span class=\"toc-text\">伊甸园区</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B8%E5%AD%98%E5%8C%BA%EF%BC%880%E5%8C%BA-1%E5%8C%BA%EF%BC%89\"><span class=\"toc-text\">幸存区（0区+1区）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%BB%E8%80%81%E5%8C%BA\"><span class=\"toc-text\">养老区</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B0%B8%E4%B9%85%E5%8C%BA-%E5%85%83%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">永久区&#x2F;元空间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\"><span class=\"toc-text\">垃圾回收</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gc%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">gc算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"小益子","slug":"blog-author","avatar":"/images/HeadPhoto.jpg","link":"/","description":"小益子的个人博客","socials":{"github":"https://github.com/doubly-yi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_18335837","juejin":"","customs":{"gitee":{"icon":"/icons/gitee2.svg","link":"https://gitee.com/doubly"},"bilibili":{"icon":"/icons/bilibili.svg","link":"https://space.bilibili.com/294694129"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"（已解决）IDEA Tomcat控制台中文乱码","uid":"7c57be050b6f578d9f3dc30fc68278e1","slug":"（已解决）IDEA-Tomcat控制台中文乱码","date":"2021-08-19T06:24:30.000Z","updated":"2021-10-14T15:43:59.933Z","comments":true,"path":"api/articles/（已解决）IDEA-Tomcat控制台中文乱码.json","keywords":null,"cover":"/images/default-cover.jpg","text":"@TOC 前言此篇博客记录自己解决win系统idea配置tomcat控制台输出乱码问题，所有的尝试我都会列举出来。有同样问题的朋友可以借鉴，我本人的解决方法为方法6，推荐优先尝试 环境系统：windows 7IDEA：2020.1Tomcat：7.0.96 问题描述：IDEA配置...","link":"","photos":[],"count_time":{"symbolsCount":930,"symbolsTime":"1 mins."},"categories":[{"name":"工具软件","slug":"工具软件","count":1,"path":"api/categories/工具软件.json"},{"name":"Java","slug":"工具软件/Java","count":1,"path":"api/categories/工具软件/Java.json"}],"tags":[{"name":"IDEA","slug":"IDEA","count":1,"path":"api/tags/IDEA.json"}],"author":{"name":"小益子","slug":"blog-author","avatar":"/images/HeadPhoto.jpg","link":"/","description":"小益子的个人博客","socials":{"github":"https://github.com/doubly-yi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_18335837","juejin":"","customs":{"gitee":{"icon":"/icons/gitee2.svg","link":"https://gitee.com/doubly"},"bilibili":{"icon":"/icons/bilibili.svg","link":"https://space.bilibili.com/294694129"}}}},"feature":true}}