{"title":"AWT","uid":"0e0df221b1250742f9aa695df150d6dd","slug":"Java/AWT","date":"2021-11-04T14:02:51.000Z","updated":"2021-11-10T15:17:30.789Z","comments":true,"path":"api/articles/Java/AWT.json","keywords":null,"cover":"/images/default-cover.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>GUI：图形化界面编程</p></blockquote>\n<h1 id=\"AWT简介\"><a href=\"#AWT简介\" class=\"headerlink\" title=\"AWT简介\"></a>AWT简介</h1><p>Abstract Windows Tools（抽象的窗口工具）</p>\n<h1 id=\"Frame\"><a href=\"#Frame\" class=\"headerlink\" title=\"Frame\"></a>Frame</h1><p>基本代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class FrameTest &#123;\n    public static void main(String[] args) &#123;\n        Frame frame &#x3D; new Frame(&quot;我的第一个Java图形界面窗口&quot;);\n        &#x2F;&#x2F;设置窗口可见性\n        frame.setVisible(true);\n        &#x2F;&#x2F;设置窗口大小\n        frame.setSize(300,300);\n        &#x2F;&#x2F;设置窗口背景颜色\n        frame.setBackground(new Color(85,150,69));\n        &#x2F;&#x2F;设置窗口位置\n        frame.setLocation(300,300);\n        &#x2F;&#x2F;设置大小固定\n        frame.setResizable(false);\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"/post/Java/AWT/image-20211107172413926.png\" alt=\"image-20211107172413926\"></p>\n<p>展示多个窗口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class FrameTest2 &#123;\n    public static void main(String[] args) &#123;\n        MyFrame frame1 &#x3D; new MyFrame(100,100,200,200, Color.green);\n        MyFrame frame2 &#x3D; new MyFrame(300,100,200,200, Color.blue);\n        MyFrame frame3 &#x3D; new MyFrame(100,300,200,200, Color.yellow);\n        MyFrame frame4 &#x3D; new MyFrame(300,300,200,200, Color.red);\n    &#125;\n&#125;\n\nclass MyFrame extends Frame&#123;\n    &#x2F;&#x2F;可能存在多个窗口，我们需要一个计数器\n    static int id &#x3D; 0;\n\n    public MyFrame(int x, int y, int w ,int h,Color color)&#123;\n        super(&quot;MyFrame&quot;+(++id));\n        setBounds(x, y, w, h);\n        setBackground(color);\n        setVisible(true);\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"/post/Java/AWT/image-20211107172936266.png\" alt=\"image-20211107172936266\"></p>\n<h1 id=\"Panel\"><a href=\"#Panel\" class=\"headerlink\" title=\"Panel\"></a>Panel</h1><p>Panel可以堪称一个容器，但是不能单独存在</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class PanelTest &#123;\n    public static void main(String[] args) &#123;\n        Frame frame &#x3D; new Frame(&quot;我的窗口&quot;);\n        &#x2F;&#x2F;存在布局的概念\n        Panel panel &#x3D; new Panel();\n\n        &#x2F;&#x2F;设置布局\n        frame.setLayout(null);\n        frame.setVisible(true);\n        frame.setBounds(300,300,500,500);\n        frame.setBackground(Color.green);\n\n        &#x2F;&#x2F;panel设置坐标，型对于Frame\n        panel.setBounds(50,50,400,400);\n        panel.setBackground(Color.red);\n\n        &#x2F;&#x2F;将面板放入Frame中\n        frame.add(panel);\n        \n        &#x2F;&#x2F;监听事件，监听窗口关闭事件\n        &#x2F;&#x2F;适配器模式\n        frame.addWindowListener(new WindowAdapter() &#123;\n            @Override\n            public void windowClosing(WindowEvent e) &#123;\n                System.exit(0);\n            &#125;\n        &#125;);\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"/post/Java/AWT/image-20211107173718293.png\" alt=\"image-20211107173718293\"></p>\n<h1 id=\"布局管理器\"><a href=\"#布局管理器\" class=\"headerlink\" title=\"布局管理器\"></a>布局管理器</h1><h2 id=\"流式布局\"><a href=\"#流式布局\" class=\"headerlink\" title=\"流式布局\"></a>流式布局</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class FlowLayoutTest &#123;\n    public static void main(String[] args) &#123;\n        Frame frame &#x3D; new Frame();\n\n        &#x2F;&#x2F;新建按钮\n        Button btn1 &#x3D; new Button(&quot;btn1&quot;);\n        Button btn2 &#x3D; new Button(&quot;btn2&quot;);\n        Button btn3 &#x3D; new Button(&quot;btn3&quot;);\n\n        &#x2F;&#x2F;设置流式布局\n        &#x2F;&#x2F;frame.setLayout(new FlowLayout());\n        frame.setLayout(new FlowLayout(FlowLayout.LEFT));\n        frame.setBounds(100,100,200,200);\n        frame.setVisible(true);\n\n        &#x2F;&#x2F;添加按钮到Frame中\n        frame.add(btn1);\n        frame.add(btn2);\n        frame.add(btn3);\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li>居中布局</li>\n</ul>\n<p><img src=\"/post/Java/AWT/image-20211107174411543.png\" alt=\"image-20211107174411543\"></p>\n<ul>\n<li>靠左布局</li>\n</ul>\n<p><img src=\"/post/Java/AWT/image-20211107174336262.png\" alt=\"image-20211107174336262\"></p>\n<h2 id=\"东西南北中\"><a href=\"#东西南北中\" class=\"headerlink\" title=\"东西南北中\"></a>东西南北中</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class FlowLayoutTest2 &#123;\n    public static void main(String[] args) &#123;\n        Frame frame &#x3D; new Frame();\n\n        &#x2F;&#x2F;新建按钮\n        Button btn1 &#x3D; new Button(&quot;btn1&quot;);\n        Button btn2 &#x3D; new Button(&quot;btn2&quot;);\n        Button btn3 &#x3D; new Button(&quot;btn3&quot;);\n        Button btn4 &#x3D; new Button(&quot;btn4&quot;);\n        Button btn5 &#x3D; new Button(&quot;btn5&quot;);\n\n        frame.setBounds(100, 100, 200, 200);\n        frame.setVisible(true);\n\n        &#x2F;&#x2F;添加按钮到Frame中\n        frame.add(btn1,BorderLayout.EAST);\n        frame.add(btn2,BorderLayout.WEST);\n        frame.add(btn3,BorderLayout.NORTH);\n        frame.add(btn4,BorderLayout.SOUTH);\n        frame.add(btn5,BorderLayout.CENTER);\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"/post/Java/AWT/image-20211107175238742.png\" alt=\"image-20211107175238742\"></p>\n<h2 id=\"表格布局-Grid\"><a href=\"#表格布局-Grid\" class=\"headerlink\" title=\"表格布局 Grid\"></a>表格布局 Grid</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class GridLayoutTest &#123;\n    public static void main(String[] args) &#123;\n        Frame frame &#x3D; new Frame();\n\n        &#x2F;&#x2F;新建按钮\n        Button btn1 &#x3D; new Button(&quot;btn1&quot;);\n        Button btn2 &#x3D; new Button(&quot;btn2&quot;);\n        Button btn3 &#x3D; new Button(&quot;btn3&quot;);\n        Button btn4 &#x3D; new Button(&quot;btn4&quot;);\n        Button btn5 &#x3D; new Button(&quot;btn5&quot;);\n\n        frame.setBounds(100, 100, 200, 200);\n        frame.setVisible(true);\n\n        frame.setLayout(new GridLayout(3,2));\n\n        &#x2F;&#x2F;添加按钮到Frame中\n        frame.add(btn1);\n        frame.add(btn2);\n        frame.add(btn3);\n        frame.add(btn4);\n        frame.add(btn5);\n\n        &#x2F;&#x2F;根据组件的大小自动调整窗口大小\n        frame.pack();\n\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"/post/Java/AWT/image-20211107175603057.png\" alt=\"image-20211107175603057\"></p>\n<h1 id=\"画笔\"><a href=\"#画笔\" class=\"headerlink\" title=\"画笔\"></a>画笔</h1><p>Frame在初始化时，会自动调用一次画笔的paint方法。如果需要重新绘制，则需要<code>repaint()</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class PaintTest &#123;\n    public static void main(String[] args) &#123;\n        new MyPaint().init();\n    &#125;\n&#125;\n\nclass MyPaint extends Frame&#123;\n\n    public void init()&#123;\n        setVisible(true);\n        setBounds(200,200,600,400);\n    &#125;\n\n    &#x2F;&#x2F;画笔\n    @Override\n    public void paint(Graphics g) &#123;\n        &#x2F;&#x2F;设置颜色\n        g.setColor(Color.red);\n        &#x2F;&#x2F;画一个圆\n        g.drawOval(100,100,100,100);\n        &#x2F;&#x2F;实心圆\n        g.fillOval(200,100,100,100);\n        g.setColor(Color.green);\n        &#x2F;&#x2F;圆角矩形\n        g.fillRoundRect(100,200,100,100,10,10);\n\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"/post/Java/AWT/image-20211109215643921.png\" alt=\"image-20211109215643921\"></p>\n<h1 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h1><p>解释：当某个事情发生的时候，将要干什么</p>\n<h2 id=\"按钮事件监听\"><a href=\"#按钮事件监听\" class=\"headerlink\" title=\"按钮事件监听\"></a>按钮事件监听</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ActionEventTest &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F;按下按钮触发一些事情\n        Frame frame &#x3D; new Frame();\n        closeWindow(frame);\n\n        Button button &#x3D; new Button(&quot;anniu&quot;);\n\n        frame.add(button);\n        MyTestActionListener myTestActionListener &#x3D; new MyTestActionListener();\n        &#x2F;&#x2F;按钮增加监听事件\n        button.addActionListener(myTestActionListener);\n\n        frame.setVisible(true);\n        frame.pack();\n    &#125;\n\n    &#x2F;&#x2F;抽取方法，用于关闭窗口\n    private static void closeWindow(Frame frame)&#123;\n        frame.addWindowListener(new WindowAdapter() &#123;\n            @Override\n            public void windowClosing(WindowEvent e) &#123;\n                System.exit(0);\n            &#125;\n        &#125;);\n    &#125;\n&#125;\n\n&#x2F;&#x2F;创建一个监听器类继承ActionListener\nclass MyTestActionListener implements ActionListener&#123;\n    @Override\n    public void actionPerformed(ActionEvent e) &#123;\n        System.out.println(&quot;按下了按钮&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"/post/Java/AWT/image-20211109211024436.png\" alt=\"image-20211109211024436\"></p>\n<p>可以多个按钮公用同一个监听事件，也可以一个按钮增加多个监听事件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ActionEventTest &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F;按下按钮触发一些事情\n        Frame frame &#x3D; new Frame();\n        closeWindow(frame);\n\n        Button button &#x3D; new Button(&quot;Start&quot;);\n        Button button2 &#x3D; new Button(&quot;Stop&quot;);\n        &#x2F;&#x2F;手动设置ActionCommand，如果不设置，默认就是Label的值\n        button2.setActionCommand(&quot;btn2-stop&quot;);\n\n        frame.add(button,BorderLayout.NORTH);\n        frame.add(button2,BorderLayout.CENTER);\n        MyTestActionListener myTestActionListener &#x3D; new MyTestActionListener();\n        &#x2F;&#x2F;两个按钮公用同一个监听事件\n        button.addActionListener(myTestActionListener);\n        button2.addActionListener(myTestActionListener);\n\n        frame.setVisible(true);\n        frame.pack();\n    &#125;\n\n    &#x2F;&#x2F;抽取方法，用于关闭窗口\n    private static void closeWindow(Frame frame)&#123;......&#125;\n&#125;\n\nclass MyTestActionListener implements ActionListener&#123;\n    @Override\n    public void actionPerformed(ActionEvent e) &#123;\n        String actionCommand &#x3D; e.getActionCommand();\n        int modifiers &#x3D; e.getModifiers();\n        long when &#x3D; e.getWhen();\n        int id &#x3D; e.getID();\n        Object source &#x3D; e.getSource();\n\n        System.out.println(actionCommand);\n        System.out.println(modifiers);\n        System.out.println(when);\n        System.out.println(id);\n        System.out.println(source);\n        System.out.println(&quot;按下了按钮&quot;);\n        &#x2F;&#x2F;可以通过判断CommandAction的值来执行不同按钮的操作\n        if(actionCommand.equals(&quot;btn2-stop&quot;))&#123;\n            System.out.println(&quot;按下了停止按钮&quot;);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"/post/Java/AWT/image-20211109212433751.png\" alt=\"image-20211109212433751\"></p>\n<h2 id=\"输入框事件监听\"><a href=\"#输入框事件监听\" class=\"headerlink\" title=\"输入框事件监听\"></a>输入框事件监听</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TextFieldTest &#123;\n    public static void main(String[] args) &#123;\n        new MyFrameTest();\n    &#125;\n&#125;\n\nclass MyFrameTest extends Frame&#123;\n    public MyFrameTest()&#123;\n        TextField textField &#x3D; new TextField();\n\n        add(textField);\n\n        &#x2F;&#x2F;监听这个文本框输入的内容\n        MyTextFieldListener listener &#x3D; new MyTextFieldListener();\n        &#x2F;&#x2F;当按下回车时会触发这个输入框的事件\n        textField.addActionListener(listener);\n\n        &#x2F;&#x2F;设置替换编码，可用于密码\n        textField.setEchoChar(&#39;*&#39;);\n\n        setVisible(true);\n        pack();\n    &#125;\n&#125;\n\nclass MyTextFieldListener implements ActionListener&#123;\n\n    @Override\n    public void actionPerformed(ActionEvent e) &#123;\n        Object source &#x3D; e.getSource();\n        if(source instanceof TextField)&#123;\n            TextField textField &#x3D; (TextField) source;\n            String text &#x3D; textField.getText();\n            System.out.println(text);\n            textField.setText(&quot;&quot;);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"/post/Java/AWT/image-20211109214136927.png\" alt=\"image-20211109214136927\"></p>\n<p><strong>例子：简易计算器</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TestCalc &#123;\n    public static void main(String[] args) &#123;\n        new Calculator();\n    &#125;\n&#125;\n\nclass Calculator extends Frame&#123;\n\n    public Calculator()&#123;\n        &#x2F;&#x2F;从左至右，流式布局\n        this.setLayout(new FlowLayout());\n        this.setVisible(true);\n        this.setLocation(new Point(500,500));\n        this.addWindowListener(new WindowAdapter() &#123;\n            @Override\n            public void windowClosing(WindowEvent e) &#123;\n                System.out.println(&quot;计算器退出&quot;);\n                System.exit(0);\n            &#125;\n        &#125;);\n\n        init();\n        this.pack();\n    &#125;\n\n    public void init()&#123;\n        TextField num1 &#x3D; new TextField(10);\n        TextField num2 &#x3D; new TextField(10);\n        TextField sum &#x3D; new TextField(20);\n        &#x2F;&#x2F;标签\n        Label opt &#x3D; new Label(&quot;+&quot;);\n\n        Button eq &#x3D; new Button(&quot;&#x3D;&quot;);\n\n        this.add(num1);\n        this.add(opt);\n        this.add(num2);\n        this.add(eq);\n        this.add(sum);\n\n        eq.addActionListener(new MyActionListener(num1,num2,sum));\n    &#125;\n&#125;\n\nclass MyActionListener implements ActionListener&#123;\n\n    private TextField num1,num2,num3;\n\n    public MyActionListener(TextField num1, TextField num2, TextField num3) &#123;\n        this.num1 &#x3D; num1;\n        this.num2 &#x3D; num2;\n        this.num3 &#x3D; num3;\n    &#125;\n\n    @Override\n    public void actionPerformed(ActionEvent e) &#123;\n        String num1 &#x3D; this.num1.getText();\n        String num2 &#x3D; this.num2.getText();\n\n        int a &#x3D; Integer.parseInt(num1);\n        int b &#x3D; Integer.parseInt(num2);\n\n        num3.setText(&quot;&quot; + (a+b));\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"/post/Java/AWT/image-20211109214754706.png\" alt=\"image-20211109214754706\"></p>\n<h2 id=\"鼠标监听事件\"><a href=\"#鼠标监听事件\" class=\"headerlink\" title=\"鼠标监听事件\"></a>鼠标监听事件</h2><p>示例代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">frame.addMouseListener(new MouseAdapter() &#123;\n    &#x2F;&#x2F;重写鼠标按下的事件\n    @Override\n    public void mousePressed(MouseEvent e) &#123;\n        System.out.println(&quot;点击了鼠标&quot;);\n    &#125;\n&#125;);</code></pre>\n\n\n\n<p><strong>例子：利用鼠标模仿画图工具</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MouseActionTest &#123;\n    public static void main(String[] args) &#123;\n        new MyMouseFrame(&quot;画图&quot;).init();\n    &#125;\n&#125;\n\nclass MyMouseFrame extends Frame&#123;\n\n    &#x2F;&#x2F;用来记录保存鼠标点击过的点的位置，因为鼠标窗体repaint时需要知道每一个点的位置\n    private final java.util.List&lt;Point&gt; points &#x3D; new ArrayList&lt;&gt;();\n\n    public MyMouseFrame(String title) throws HeadlessException &#123;\n        super(title);\n    &#125;\n\n    public void init()&#123;\n        &#x2F;&#x2F;添加鼠标监听事件\n        this.addMouseListener(new MouseAdapter() &#123;\n            &#x2F;&#x2F;重写鼠标按下的事件\n            @Override\n            public void mousePressed(MouseEvent e) &#123;\n                &#x2F;&#x2F;当鼠标按下时，记录按下点的位置\n                MyMouseFrame myMouseFrame &#x3D; (MyMouseFrame) e.getSource();\n                points.add(e.getPoint());\n                System.out.printf(&quot;在%d,%d上画了一个点\\n&quot;,e.getX(),e.getY());\n                &#x2F;&#x2F;使窗体重新绘制点\n                myMouseFrame.repaint();\n            &#125;\n        &#125;);\n\n        setBounds(200,200,200,200);\n        setVisible(true);\n    &#125;\n\n    @Override\n    public void paint(Graphics g) &#123;\n        &#x2F;&#x2F;设置画笔颜色\n        g.setColor(Color.green);\n        &#x2F;&#x2F;遍历list进行绘画\n        for (Point point : points) &#123;\n            &#x2F;&#x2F;画一个实心的小圆，表示一个点\n            g.fillOval(point.x,point.y,10,10);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"/post/Java/AWT/image-20211110223308591.png\" alt=\"image-20211110223308591\"></p>\n<h2 id=\"窗口监听事件\"><a href=\"#窗口监听事件\" class=\"headerlink\" title=\"窗口监听事件\"></a>窗口监听事件</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class WindowActionTest &#123;\n    public static void main(String[] args) &#123;\n        Frame frame &#x3D; new Frame();\n        frame.addWindowListener(new WindowAdapter() &#123;\n\n            &#x2F;&#x2F;窗口打开事件\n            @Override\n            public void windowOpened(WindowEvent e) &#123;\n                System.out.println(&quot;WindowOpened&quot;);\n            &#125;\n\n            &#x2F;&#x2F;窗口关闭中事件\n            @Override\n            public void windowClosing(WindowEvent e) &#123;\n                System.out.println(&quot;windowClosing&quot;);\n            &#125;\n\n            &#x2F;&#x2F;窗口关闭后事件\n            @Override\n            public void windowClosed(WindowEvent e) &#123;\n                System.out.println(&quot;windowClosed&quot;);\n            &#125;\n\n            &#x2F;&#x2F;窗口最小化\n            @Override\n            public void windowIconified(WindowEvent e) &#123;\n                System.out.println(&quot;windowIconified&quot;);\n            &#125;\n\n            &#x2F;&#x2F;窗口取消最小化\n            @Override\n            public void windowDeiconified(WindowEvent e) &#123;\n                System.out.println(&quot;windowDeiconified&quot;);\n            &#125;\n\n            &#x2F;&#x2F;窗口激活\n            @Override\n            public void windowActivated(WindowEvent e) &#123;\n                System.out.println(&quot;windowActivated&quot;);\n            &#125;\n\n            &#x2F;&#x2F;窗口失去焦点\n            @Override\n            public void windowDeactivated(WindowEvent e) &#123;\n                System.out.println(&quot;windowDeactivated&quot;);\n            &#125;\n\n            @Override\n            public void windowStateChanged(WindowEvent e) &#123;\n                System.out.println(&quot;windowStateChanged&quot;);\n            &#125;\n\n            @Override\n            public void windowGainedFocus(WindowEvent e) &#123;\n                System.out.println(&quot;windowGainedFocus&quot;);\n            &#125;\n\n            @Override\n            public void windowLostFocus(WindowEvent e) &#123;\n                System.out.println(&quot;windowLostFocus&quot;);\n            &#125;\n        &#125;);\n        frame.setBounds(200,200,200,200);\n        frame.setVisible(true);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"键盘监听事件\"><a href=\"#键盘监听事件\" class=\"headerlink\" title=\"键盘监听事件\"></a>键盘监听事件</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class KeyBoardActionTest &#123;\n    public static void main(String[] args) &#123;\n        new KeyBoardFrame(&quot;键盘事件监听&quot;).init();\n    &#125;\n&#125;\n\nclass KeyBoardFrame extends Frame&#123;\n    public KeyBoardFrame(String title) throws HeadlessException &#123;\n        super(title);\n    &#125;\n\n    public void init()&#123;\n        &#x2F;&#x2F;添加键盘监听事件\n        addKeyListener(new KeyAdapter() &#123;\n            @Override\n            public void keyPressed(KeyEvent e) &#123;\n                int keyCode &#x3D; e.getKeyCode();\n                char keyChar &#x3D; e.getKeyChar();\n                System.out.println(&quot;keyCode&#x3D;&gt;&quot;+keyCode+&quot; keyChar&#x3D;&gt;&quot;+keyChar);\n                switch (keyCode)&#123;\n                    case KeyEvent.VK_UP:\n                        System.out.println(&quot;上&quot;);\n                        break;\n                    case KeyEvent.VK_DOWN:\n                        System.out.println(&quot;下&quot;);\n                        break;\n                    case KeyEvent.VK_LEFT:\n                        System.out.println(&quot;左&quot;);\n                        break;\n                    case KeyEvent.VK_RIGHT:\n                        System.out.println(&quot;右&quot;);\n                        break;\n                &#125;\n            &#125;\n        &#125;);\n        setBounds(200,200,200,200);\n        setVisible(true);\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"/post/Java/AWT/image-20211110230510655.png\" alt=\"image-20211110230510655\"></p>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3>","feature":true,"text":" GUI：图形化界面编程 AWT简介Abstract Windows Tools（抽象的窗口工具） Frame基本代码 public class FrameTest &#123; public static void main(String[] args) &#123; Fram...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[{"name":"GUI","slug":"GUI","count":1,"path":"api/tags/GUI.json"},{"name":"AWT","slug":"AWT","count":1,"path":"api/tags/AWT.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#AWT%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">AWT简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Frame\"><span class=\"toc-text\">Frame</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Panel\"><span class=\"toc-text\">Panel</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8\"><span class=\"toc-text\">布局管理器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">流式布局</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%9C%E8%A5%BF%E5%8D%97%E5%8C%97%E4%B8%AD\"><span class=\"toc-text\">东西南北中</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E6%A0%BC%E5%B8%83%E5%B1%80-Grid\"><span class=\"toc-text\">表格布局 Grid</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%BB%E7%AC%94\"><span class=\"toc-text\">画笔</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC\"><span class=\"toc-text\">事件监听</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%89%E9%92%AE%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC\"><span class=\"toc-text\">按钮事件监听</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A1%86%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC\"><span class=\"toc-text\">输入框事件监听</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%BC%A0%E6%A0%87%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">鼠标监听事件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AA%97%E5%8F%A3%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">窗口监听事件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%AE%E7%9B%98%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">键盘监听事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol></li></ol></li></ol>","author":{"name":"小益子","slug":"blog-author","avatar":"/images/HeadPhoto.jpg","link":"/","description":"小益子的个人博客","socials":{"github":"https://github.com/doubly-yi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_18335837","juejin":"","customs":{"gitee":{"icon":"/icons/gitee2.svg","link":"https://gitee.com/doubly"},"bilibili":{"icon":"/icons/bilibili.svg","link":"https://space.bilibili.com/294694129"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"SpringCloud Sleuth","uid":"b492804fd34ff483c1550eb5b474ddb6","slug":"SpringCloud/SpringCloud Sleuth","date":"2021-10-20T15:55:00.000Z","updated":"2021-10-20T15:55:31.586Z","comments":true,"path":"api/articles/SpringCloud/SpringCloud Sleuth.json","keywords":null,"cover":"/images/default-cover2.jpg","text":"概述为什么出现这个技术？解决什么问题？在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的服务节点调用来协同产生最后的请求结果，每一个前端请求都会形成一个复杂的分布式服务调用链路，链路中的任何一环出现高延迟或错误都会引起整个请求最后的失败。 是什么SpringClo...","link":"","photos":[],"count_time":{"symbolsCount":861,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"},{"name":"Spring系列","slug":"Java/Spring系列","count":2,"path":"api/categories/Java/Spring系列.json"}],"tags":[{"name":"SpringCloud","slug":"SpringCloud","count":2,"path":"api/tags/SpringCloud.json"},{"name":"Sleuth","slug":"Sleuth","count":1,"path":"api/tags/Sleuth.json"}],"author":{"name":"小益子","slug":"blog-author","avatar":"/images/HeadPhoto.jpg","link":"/","description":"小益子的个人博客","socials":{"github":"https://github.com/doubly-yi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_18335837","juejin":"","customs":{"gitee":{"icon":"/icons/gitee2.svg","link":"https://gitee.com/doubly"},"bilibili":{"icon":"/icons/bilibili.svg","link":"https://space.bilibili.com/294694129"}}}},"feature":true}}